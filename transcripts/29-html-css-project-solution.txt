[00:00:00]
>> Brian Holt: So let's go ahead and start styling these. Let's start by styling a story. So if we come back over here and look at our mockup here, the whole thing has these kind of black bars on the top and black bars on the bottom. Let's kinda start with kinda the borders looking here.

[00:00:20]
So I'm gonna say, border:, how did I do it inside of here?
>> Brian Holt: I did it with just, okay. So, a story has a border of 1px solid. We'll say, you can say black. Black is like the blackest black that it can do. A really nice black, that I quite like is, #333.

[00:00:47]
It's a nice, like a little bit softer black. So, that's what I tend to use. So you can see here, these now have a black border on them. Typically you don't want text pushed up right against the side. It looks a little mushed together, so just a nice little bit of padding gives a little bit of breathing room.

[00:01:05]
So if you give it 5 px, or something like that, it just pushes things away from the sides, and makes it look a little nicer. Okay, I'm gonna do something with the row here.
>> Brian Holt: I'm gonna make this display: flex; right? It makes sense?
>> Brian Holt: And I'm gonna do align-items, and I wanted everything to be the same height, right?

[00:01:37]
That's something that we can kinda see over here. Everything's the same height even though, this is not actually taking up this, there's a lot of white space down here, that's okay. So we're gonna do a line items: stretch, and now if we come back over here, hit Refresh, now it's kind of starting to take some shape.

[00:02:02]
Kind of fix these titles a little bit. So come up here and do .story-title. We're going to make this font weight: normal, I made it italic in there as well. So this is going to be text-style, no font-style: italic. Let's do font-size: 30 px, and give a bit of margin on both sides.

[00:02:31]
So I'm gonna say margin: 15px 0; and then text-align: center.
>> Brian Holt: It's starting to look a little bit more like what we have over here. Yeah, looking better.
>> Brian Holt: Another pro tip is, if you have dense text like this, this is kinda hard to read for people. So we can give it maybe a little more, we're gonna go under here and do .story-text, there's a thing called line-height, which is how space to put between things, like how things can be double-spaced or whatever.

[00:03:17]
Usually, at least for dense texts like that, you want it to be at least 1.2, which is like 1.2 normal spacing. It's a multiplier. You can think of that as being like a multiplier. I'll give it 1.5, just so it looks a little bit more spaced out. Now, it breathes a little more, it's a little bit easier to see.

[00:03:38]

>> Brian Holt: Cool?
>> Brian Holt: So that looks pretty good. We want this to be a little bit more, not quite so, we wanted this one to be bigger in the middle rather than the one's on the sides. Right now it's split into thirds, and we would like it to be split more into 25-50-25.

[00:04:00]
A couple ways we could do that. The easiest way is to set the .quarter to be 25% width. Whoops, width: 25%. Now, if we come back over here. That looks terrible. [LAUGH] Not at all what I was intending to do. And then have the half be width: 50%.

[00:04:33]
Yeah, that looks like a little bit more spaced out. Another way you could do this is you could use what's called Flexgrill. Let me look at Flexbox. This one I have to look up, cuz I can't always remember. So there's order, flex-grow. Yep, that's what I thought. So, instead of doing width: 25%; you could do a, say, flex-grow, and for quarter you want it to be one unit, and then you want this one to be flex-grow: 2, cuz you want this to be two units, right, so you're gonna have one unit, two units, one unit.

[00:05:09]
That basically means that this half is going to be double the quarter is. So now we can get rid of these widths.
>> Brian Holt: Maybe not.
>> Brian Holt: Flex-basis, maybe that's what it is. Anyway, you can get a little bit more clever with it. The thing with Flexbox is it's gonna make sure everything has a proper width to take as much as it wants.

[00:05:54]
For now we'll just stick with widths 25% cuz I think that's a little bit easier to deal with. Let's get this image centered really quick. So, a couple ways you could do this. The easiest way I think is gonna be, I think we could just say, what did we say, it was .story-image, is that what we call that?

[00:06:17]
I don't think we gave it a class, did we? We didn't. So, this image here we're gonna say story-image. Save that, and then refer to .story-image, and let's just make it take up 100% of its space,
>> Brian Holt: And that way now it gets a little bit bigger. It's gonna stretch the image a little bit, but also puppies, so I'm okay with it.

[00:06:46]

>> Brian Holt: Good? How do we feel about this? You can see it's a really iterative process. You just kind of like do something. It's like, how does that look? And then you do something, and then say, okay, now how does it look? And a lot of times I'll just do this directly in the dev tools as well.

[00:07:01]
Yeah, this .story-text is a little small. Let's make that a little bit bigger as well. Maybe font-size: 16px, or something like that. That's exactly what it is. Good job Brian. Let's try 18.
>> Brian Holt: Yeah, there we go. That looks a bit better. Okay, how do we feel about the middle row?

[00:07:27]
Did that go okay? Do you kind of understand how we worked it out here?
>> Student: Yeah.
>> Brian Holt: Cool.
>> Brian Holt: Let's go do the bottom row.
>> Brian Holt: So let's go look at our picture, our design, and we're gonna have another story here, so we can pretty much just use this styling that we have up here on this one, right?

[00:07:48]
So we're gonna have here another row, section.row, and the first thing that we're gonna have is another one of these stories. I'm just gonna, again, copy and paste it, cuz I'm not super interested in rewriting it. But yeah, say I have another story there, come back here and look at our picture.

[00:08:14]
And now we another image right there.
>> Brian Holt: Okay, and then the next thing we're gonna have is, we're gonna have another article, or actually, this looks more like a navigation, right? Because it looks like how you would navigate to the rest of the site, so there's actually one called nav, so I'm gonna call this site-nav.

[00:08:42]
Right, and there's an element called nav, and that's really useful because assistive technologies like screen readers can say, okay, this is a navigation. I know that all the navigating links are in there, so it's also helpful for accessibility technology. And it's just useful to you in the future to know, okay, this is where I stuck all my navigation.

[00:09:06]

>> Brian Holt: Okay, cool, so what would you call these, right? I don't really know what I would call it, it's kind of a list, actually. So I might call this an unordered list cuz it doesn't actually matter what order these come in. So I'm gonna call it an unordered list, I'm gonna call this,

[00:09:25]

>> Brian Holt: nav-list, in fact, I might, yeah, whatever, this is fine.
>> Brian Holt: Let's actually even make this, let's do it this way, we're gonna get rid of the nav. And we're just gonna make this an unordered list, and I think that's okay.
>> Brian Holt: Okay, I'm gonna do an li, and then this is gonna be a nav item, and I'm gonna have five of those.

[00:09:53]

>> Brian Holt: And what did I have, I had sports, I had politics, I had local, I had technology, a good one.
>> Brian Holt: And opinion, maybe, I don't know, it doesn't really matter. Okay, so now I have these five list items on there. Come back over here, there you see them.

[00:10:17]
And we're gonna make this a three-quarter as well, three-quarter.
>> Brian Holt: Cool, so now we have here underneath this, this is gonna be a three-quarter, and this takes up 75%.
>> Brian Holt: Come back over here, look, yeah, looks more or less like it's doing that. Okay, and now we're gonna come inside of the nav-list.

[00:10:50]

>> Brian Holt: And inside of here, we're gonna have another display flex, right, cuz this is going to be flex in the column direction. Right, so let's do that.
>> Brian Holt: So display: flex, it's gonna be flex-direction: column.
>> Brian Holt: And then each one of these is going to be a nav-item, right, is what we called it.

[00:11:29]
These are gonna be width 100%, see what that looks like so far.
>> Brian Holt: And let's see, inspect element.
>> Brian Holt: Okay, those are all taking 100%.
>> Brian Holt: So what we wanna do, is we want each one of these to take up as much space as it possibly can, right, so that's gonna be,

[00:12:08]

>> Brian Holt: What did I do here, I can't even remember.
>> Brian Holt: Inspect, I remember the way I got this, I really liked it. Line item center and flex 1, that's what it is. So there's a thing here that you can say to basically take up as much space as you possibly can, which is flex: 1.

[00:12:32]
Let me make sure that's actually what I'm going for, yeah. So let's talk about what flex: 1 is for just a second. As you can see here, I still have to refer back to stuff I've done before. I have to look at this page literally twice a day.

[00:12:44]
So what I did here is, I used flex, which is a combination of flex-grow, flex-shrink, and flex-basis, which is what I was not doing before. I needed to combine flex-grow and flex-shrink. And if you do flex 1, it basically says, take up as much space as you can.

[00:13:04]
And in fact, if I went up here and I made these flex 1, flex 2 and flex 3, then that's what I was going for before. So in any case, does that kind of make sense that if you say flex 1, it's just basically, each one of these is one item, and I want you to take up as much space as possible.

[00:13:22]
And each one of these is gonna take up 20% because if there's five of them. But if I deleted one of them, they would take up 25%, it kind of just automatically does that adjusting for you, cool? Okay, so that's what flex 1's gonna do here for us.

[00:13:40]
We wanted to color them each kind of different colors. So what we can do here is, we can say nav-item:nth-child(1),
>> Brian Holt: And we can say background-color, I'm gonna copy these colors because I could not come up with these colors on my own.
>> Brian Holt: Okay, and we're gonna have five of these.

[00:14:15]
So I'm just gonna do nthchild 3, 4, 5. You could go through and give each one of these their own class and style that on the class. But this is a lot easier because then if we change things around, we don't have to change the classes. And I can just go and copy all these colors.

[00:14:37]

>> Brian Holt: Oops.
>> Brian Holt: Questions about this so far while I'm copying and pasting colors?
>> Brian Holt: Okay, so if we come back over here to Frontend Masters, now notice they all have nice colors, right.
>> Brian Holt: So this is annoying, we have this annoying padding here, which is what we added ourselves.

[00:15:27]
So we kinda have to go back and override that. So what we're gonna do here with the nav-list, we're gonna say have margin: 0 and padding: 0.
>> Brian Holt: Refresh that, that looks a little bit better, okay, this still has bullets, right, cuz it's getting that from the unordered list part.

[00:15:51]
And in this particular case, we don't want it to have bullets. So you can just come in here and say, nav-list, list-style: none. Come back over here, that should drop that. And now, we would like all these things to be centered inside of them. This will be another really easy case that we can just come here and say, display flex.

[00:16:14]
And we're gonna have it do align-items center. And hope we won't mess up with justified context. We still want it to be sort of left justified. So that's gonna centre it vertically in here. We're gonna give it a bit of a padding on the left to kinda get a little indented.

[00:16:38]
So we're gonna say padding left, maybe 25 pixels.
>> Brian Holt: Get that nice and inside, and then we'll get another font size in that to be more like a 30 pixels.
>> Brian Holt: Looks a little bit more like what we're going for, right?
>> Brian Holt: I think I made the font color a little nice, a little kinda gray, let's go maybe a CCC, something like that.

[00:17:14]

>> Brian Holt: Sorry, not font color just color.
>> Brian Holt: No a bit darker than that, let's go with maybe 999, 666. That's not lucky but looks nice though. [LAUGH] Someone's going to be upset. We're going to do 555, okay. Underneath that, then we're gonna do a font-weight: bold
>> Brian Holt: You could change the font family, as well to more like an Arial or something like that.

[00:17:53]
That's another nice thing that the visual studio code will do for you. Notice here, it actually has this font stack. It's like, hey, here's a good group of fonts to group together. So I just hit Enter. Cuz if the computer has Arial, it will use Arial. If it doesn't have Arial, it'll use Helvetica.

[00:18:10]
And if it doesn't have Helvetica, it'll say, just give me something that's San Serif. Which, I do not wanna get into typography. Also, you don't wanna listen about typography from me. But sans-serif is just something that doesn't have like caps on the letters basically or serifs. I guess this way has their technical.

[00:18:29]
So that's kinda nice, right? I mean there is links originally. So, I guess a power should go through and meet these links
>> Brian Holt: So, I'm gonna show another cool trick that you can do with Visual Studio Code.
>> Brian Holt: That's a command, no.
>> Brian Holt: So if I hold Alt, so I'm holding my Alt key and I click it multiple times.

[00:18:57]
I can have multiple cursors going at once. And then I can just start typing all of them at once.
>> Brian Holt: To just make this go nowhere.
>> Brian Holt: Okay.
>> Brian Holt: Cut that and then, I wanna go to the next after that and paste that. And then, I was able to do all of those all at once, pretty cool, right?

[00:19:25]
[LAUGH] Rather than having it type and re-type it five different times, or copy and paste a bunch of times. Again, you just hold Alt and then you'll just click multiple times, so if I just click holding Alt here you'll know so I just get a bunch of different cursors

[00:19:42]

>> Brian Holt: Then I can type in all of them.
>> Brian Holt: Yeah, anyway.
>> Brian Holt: Sublime does that as well. So that's not a unique thing to code. Actually, I would say at this point, most editors will do that. Okay, so now these are a different color because links have a default color.

[00:20:04]

>> Brian Holt: So we come back over here and we're gonna say.
>> Brian Holt: Nav-link a. So we wanna style every linker tag inside of nav-links. We're gonna say text-decoration: none; color. We'll move this color that we have down here.
>> Brian Holt: Sorry, nav-item rather.
>> Brian Holt: Okay, so now, these will link, you can hover over them it'll change the cursor.

[00:20:44]
If you remember, if you look at this one you'll notice that if you hover over it, it'll underline it. Easy way to do that is to do navlink. Or rather nav item a:hover. And then I say, text-decoration: underline.
>> Brian Holt: So for now, if I come back over here, refresh.

[00:21:16]
If I hover over it, it underlines it just to let you know, this is definitely a link. It's just a good kinda thing to do for your users. If they hover it and then see something change about it, they know that it's interactive thing.
>> Brian Holt: Yes.
>> Student2: How's the area right now, that it's underlining everything all the time.

[00:21:36]
And I tested on just one like sports for example and I then, I send it the hover just like you showed us. Do you know why possibly it could be?
>> Brian Holt: Yeah, so the first thing you need to do is you need to remove it, right here. Do text-decoration: none first because links by default have an underline, so you have to explicitly say, please remove this first.

[00:22:04]
And it has to be specifically on the inker tag, your class, you have to be styling specifically the inker link. You can't be styling the li, right? So going here, I can't style this and say text-decoration: none, I have to actually be styling the inker tag, that's another common thing to do.

[00:22:24]
Does that help? Okay, so pretty close here. Actually, I mean let's more less it. Let's try this just for fun. To make sure that I'm not crazy, flex: 1; flex: 2; and flex 3.
>> Brian Holt: Yeah, so that more or less arrives at the same. If you do flex 1, flex 2, and flex 3.

[00:22:55]
Any questions, yeah?
>> Student: [INAUDIBLE] be to one then, practice to use margin, where's padding to move contents around?
>> Brian Holt: That's a great question.
>> Brian Holt: When should you use margins and when should you use padding? There are definitely cases where it's just a total toss up and it doesn't really matter.

[00:23:20]
In those cases, I tend to lean, actually, I don't even really know. I would say, I'd lean towards margins but I don't even know if that's necessarily true.
>> Brian Holt: I guess kinda the rule of thumb is margins are for spacing things between each other, right? So if I was trying to add space between this section and this section over here, they're two separate elements.

[00:23:41]
And so if put margins between them, it would be like a no man's land that really nothing would own, either one of those things. In that case, you definitely wanna use a margin between the two. Whereas, I'll use padding more if it's included inside of that element tray, so inside of these links here whether I can create space inside of the elements, that's when you wanna use padding.

[00:24:03]
So you have to ask yourself, am I just spacing things out or am I actually spacing things inside of something? Is that sufficiently big? [LAUGH] That's the best I got for you. This is one of those things that you kinda look at it and you just kinda know and I think that kind of knowing just comes from doing it a lot.

[00:24:25]
It's a really crappy answer. [LAUGH] It's what I got though. Yeah, please.
>> Student3: I had a quick question. When you're doing the Sports, Politics, Local, how did you get the text to line up within each of those individual little color boxes?
>> Brian Holt: How did I get them to center?

[00:24:43]

>> Student3: Yeah.
>> Brian Holt: I used Flex again.
>> Student3: Okay.
>> Brian Holt: So this Flex within Flex within Flex. I'm not joking. It's literally within three times, so let's look at that. That's a really good question, though. Right nav, I don't, so reason flex: 1. Flex: 1 actually interacts with the nav list, which this is display flex.

[00:25:09]
Then itself is doing display flex on the things inside of it. And that you're doing that with the a line item center, that's actually what's gonna get us to center or the middle there. Make sense? Cool, I don't expect you to totally arrived here by yourself by the way, this is actually quite a difficult plot.

[00:25:27]
If I had given this to you without flex first of all, this would have been totally impossible. This would have been advanced, pay someone a lot of money to do this. Flex makes this possible that I can teach this to you on the first day that you're learning HTML and CSS.

[00:25:41]
But if you got most of the way there by yourself, you should feel pretty damn good about that, because this is not, this is pretty industry stuff. These are things that you would find yourself doing at a job. Which is pretty cool.

